-- Suppression des tables si elles existent déjà
DROP TABLE IF EXISTS attributions CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS tickets CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS logs_tickets CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS logs_reseaux CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS stock CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS materiels CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS reseaux CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS types_materiels CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS sites CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS utilisateurs CASCADE CONSTRAINTS;

-- Suppression des séquences si elles existent déjà
DROP SEQUENCE IF EXISTS sites_seq;
DROP SEQUENCE IF EXISTS types_materiels_seq;
DROP SEQUENCE IF EXISTS reseaux_seq;
DROP SEQUENCE IF EXISTS utilisateurs_seq;
DROP SEQUENCE IF EXISTS materiels_seq;
DROP SEQUENCE IF EXISTS attributions_seq;
DROP SEQUENCE IF EXISTS tickets_seq;
DROP SEQUENCE IF EXISTS logs_reseaux_seq;
DROP SEQUENCE IF EXISTS logs_tickets_seq;
DROP SEQUENCE IF EXISTS stock_seq;


-- =========================
-- Séquences pour chaque table
-- =========================

-- Séquence pour la table sites
CREATE SEQUENCE sites_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table types_materiels
CREATE SEQUENCE types_materiels_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table reseaux
CREATE SEQUENCE reseaux_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table utilisateurs
CREATE SEQUENCE utilisateurs_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table materiels
CREATE SEQUENCE materiels_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table attributions
CREATE SEQUENCE attributions_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table tickets
CREATE SEQUENCE tickets_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table logs_reseaux
CREATE SEQUENCE logs_reseaux_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table logs_tickets
CREATE SEQUENCE logs_tickets_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Séquence pour la table stock
CREATE SEQUENCE stock_seq
START WITH 1
INCREMENT BY 1
NOCACHE;




-- Création de la table des sites
CREATE TABLE sites (
    id_site NUMBER PRIMARY KEY,
    nom_site VARCHAR2(50) UNIQUE NOT NULL
);

-- Création de la table des types de matériels
CREATE TABLE types_materiels (
    id_type_materiel NUMBER PRIMARY KEY,
    nom_type_materiel VARCHAR2(100) UNIQUE NOT NULL
);

-- Création de la table des réseaux
CREATE TABLE reseaux (
    id_reseau NUMBER PRIMARY KEY,
    adresse_ip VARCHAR2(15) UNIQUE NOT NULL,
    sous_reseau VARCHAR2(50) NOT NULL
);

-- Création de la table des utilisateurs
CREATE TABLE utilisateurs (
    id_utilisateur NUMBER PRIMARY KEY,
    nom VARCHAR2(100) NOT NULL,
    prenom VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    id_site NUMBER NOT NULL,
    FOREIGN KEY (id_site) REFERENCES sites(id_site)
);

-- Création de la table des matériels
CREATE TABLE materiels (
    id_materiel NUMBER PRIMARY KEY,
    nom_materiel VARCHAR2(100) NOT NULL,
    id_type_materiel NUMBER NOT NULL,
    id_site NUMBER NOT NULL,
    id_reseau NUMBER,
    FOREIGN KEY (id_type_materiel) REFERENCES types_materiels(id_type_materiel),
    FOREIGN KEY (id_site) REFERENCES sites(id_site),
    FOREIGN KEY (id_reseau) REFERENCES reseaux(id_reseau)
);

-- Création de la table des attributions des matériels aux utilisateurs
CREATE TABLE attributions (
    id_attribution NUMBER PRIMARY KEY,
    id_utilisateur NUMBER NOT NULL,
    id_materiel NUMBER NOT NULL,
    FOREIGN KEY (id_utilisateur) REFERENCES utilisateurs(id_utilisateur),
    FOREIGN KEY (id_materiel) REFERENCES materiels(id_materiel)
);

-- Création de la table des tickets (gestion des incidents IT)
CREATE TABLE tickets (
    ticket_id NUMBER PRIMARY KEY,
    titre VARCHAR2(255) NOT NULL,
    description CLOB NOT NULL,
    statut VARCHAR2(20) CHECK (statut IN ('Ouvert', 'En cours', 'Fermé')) NOT NULL,
    date_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_utilisateur NUMBER NOT NULL,
    id_materiel NUMBER,
    id_site NUMBER NOT NULL,
    FOREIGN KEY (id_utilisateur) REFERENCES utilisateurs(id_utilisateur),
    FOREIGN KEY (id_materiel) REFERENCES materiels(id_materiel),
    FOREIGN KEY (id_site) REFERENCES sites(id_site)
);

-- Création de la table des logs d'événements
CREATE TABLE logs_reseaux (
    log_id NUMBER PRIMARY KEY,
    type VARCHAR2(50) NOT NULL,
    description CLOB NOT NULL,
    date_event TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id_materiel NUMBER,
    FOREIGN KEY (id_materiel) REFERENCES materiels(id_materiel)
);

-- Création de la table des logs_tickets (historisation des actions sur les tickets)
CREATE TABLE logs_tickets (
    log_id NUMBER PRIMARY KEY,
    ticket_id NUMBER NOT NULL,
    action VARCHAR2(100) NOT NULL,
    utilisateur VARCHAR2(100) NOT NULL,
    description CLOB,
    date_action TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(ticket_id)
);

-- Création de la table de gestion des stocks (fragmentation horizontale)
CREATE TABLE stock (
    stock_id NUMBER PRIMARY KEY,
    id_materiel NUMBER NOT NULL,
    id_site NUMBER NOT NULL,
    FOREIGN KEY (id_materiel) REFERENCES materiels(id_materiel),
    FOREIGN KEY (id_site) REFERENCES sites(id_site)
);

